{"0": {
    "doc": "Exercises",
    "title": "Exercises",
    "content": " ",
    "url": "/labs/lab-01/exercises/",
    
    "relUrl": "/labs/lab-01/exercises/"
  },"1": {
    "doc": "Exercises",
    "title": "Submission",
    "content": "To submit your solution, you will be creating a .zip file following the exercises below and upload it on Canvas under Assignment &gt; Lab 1: Linux, Git, Python by September 1 at midnight (11:59 EST). Late Submission . Please email us if you want to submit later than the deadline. Otherwise late penalty will be applied. ",
    "url": "/labs/lab-01/exercises/#submission",
    
    "relUrl": "/labs/lab-01/exercises/#submission"
  },"2": {
    "doc": "Exercises",
    "title": "Exercises",
    "content": "Git (5 pts) . In this exercise you are required to set a git repository, for example inside your own Github namespace. You will be downloading the zip file of this repository and submit it to Canvas. | Create a repository for your personal submissions . | Go to https://github.umich.edu/YOUR_USERNAME and click on ‚ÄúNew Project‚Äù to create a new repository (replace YOUR_USERNAME with your Github namespace) | Create a new Private repository and call it as your UMich username, e.g. if your Umich email is astark@umich.edu, call it astark | Clone the repository to ~/ae740_personal (you will have a team submission later) running git clone https://github.com/YOUR_USERNAME/YOUR_UNIQUENAME.git ~/ae740_personal (replace YOUR_UNIQUENAME with your uniquename) | Create a folder called lab1 | . | Clone https://github.com/UM-iRaL/AE740-F25.git in a folder of your choice | . Shell (35 pts) . | Exercise 1 - Answer to the following questions . | Download https://raw.githubusercontent.com/dlang/dmd/master/druntime/benchmark/extra-files/dante.txt (try using wget) | Create a file called exercise1.txt in ~/ae740_personal/lab1 and answer to the following questions . | How many lines does it contains? | How many words does it contains? | How many lines are not blank? | . | Push the file to git | . | Exercise 2 - Output redirecting . | Install fortune-mod using apt | After installation, type fortune in your terminal to see a (hopefully) interesting proverb/quote | Run fortune 5 more times and each time redirect the output to a file called fortunes.txt in ~/ae740_personal/lab1 (Hint: do not recreate the file 5 times - each time a new proverb should be added to the end of fortunes.txt) | Push the file to git | . | . Hint: For the first exercise you might want to use the command wc (Word Count). Python: RandomVector (40 pts) . In this exercise, you will implement a Python class called RandomVector. In the ae_740_personal directory, create a Python virtual environment ae740_venv, that we will use throughout the course. Inside ~/ae740_personal/lab1, create a folder called RandomVector and clone the contents from https://github.com/UM-iRaL/AE740-F25/tree/main/ae740_labs/lab1.git. This contains two files ‚Äì . | random_vector.py: Class definition. | main.py: Main Python file, that imports the RandomVector class. | . The class RandomVector will handle a list of random floating-point numbers. You are required to implement the following methods inside random_vector.py: . | __init__(self, size, max_val=1.0) (constructor): Initialize a list of size size with random values between 0 and max_val (default value 1.0) | mean(self): Returns the mean of the values in the random vector | max(self): Returns the maximum value in the random vector | min(self): Returns the minimum value in the random vector | print(self): Prints all the values in the random vector | print_histogram(self, bins): Computes the histogram of the values using bins number of bins between min() and max() and prints the histogram (see the example below) | . When you‚Äôre done, create another file called main.py to test your implementation. Note: We expect you to not use built-in functions like min(), max(), sum() or libraries like NumPy or Pandas for your implementation. Write the algorithms yourself. If you complete the exercise correctly, when you run python main.py you should see output similar to: . $ python main.py 0.458724 0.779985 0.212415 0.066795 0.622538 0.999018 0.489585 0.460587 0.079561 0.185496 0.629162 0.328032 0.242169 0.139671 0.453804 0.083038 0.619352 0.454482 0.477426 0.090497 Mean: 0.393617 Min: 0.066795 Max: 0.999018 Histogram: *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** . ",
    "url": "/labs/lab-01/exercises/",
    
    "relUrl": "/labs/lab-01/exercises/"
  },"3": {
    "doc": "Exercises",
    "title": "Exercises",
    "content": " ",
    "url": "/labs/lab-02/exercises/",
    
    "relUrl": "/labs/lab-02/exercises/"
  },"4": {
    "doc": "Git",
    "title": "Git",
    "content": " ",
    "url": "/labs/lab-01/git/",
    
    "relUrl": "/labs/lab-01/git/"
  },"5": {
    "doc": "Git",
    "title": "Table of contents",
    "content": ". | Intro | Getting started | Merge Conflict with an Imaginary Collaborator | . ",
    "url": "/labs/lab-01/git/#table-of-contents",
    
    "relUrl": "/labs/lab-01/git/#table-of-contents"
  },"6": {
    "doc": "Git",
    "title": "Intro",
    "content": "The following are selected chapters from Pro Git, if you are new to Git please read carefully these chapters as they pose the foundation of git. | Getting Started | Getting a Git Repository | Recording Changes to the Repository | Viewing the Commit History | Undoing Things | Working with Remotes | Branches in a Nutshell | Basic Branching and Merging | Branch Management | Branching Workflows | Remote Branches | . Also visit Git command reference to get help with commands and command syntax. The following exercises are designed to help you to experiment and learn how these commands are used in practice. ",
    "url": "/labs/lab-01/git/#intro",
    
    "relUrl": "/labs/lab-01/git/#intro"
  },"7": {
    "doc": "Git",
    "title": "Getting started",
    "content": ". | Install Git with (requires internet connection). For this you need to update APT cache and then install the git-core package | Add your name/email to your Git configuration (system-wide) | . git config --global user.name YOUR_NAME git config --global user.email YOUR_MIT_EMAIL_ADDRESS . | Generate SSH keys (do not forget the passphrase if you choose to set one) | Add SSH keys to your github.mit.edu account | Create a new repository on https://github.mit.edu | Open a terminal and create a new directory using mkdir named vnav19 in your HOME directory | Clone your (empty) Git repo (earn street cred by calling by using ‚Äúrepo‚Äù instead of ‚Äúrepository‚Äù) | . git clone git@github.mit.edu:USERNAME/REPO.git . ",
    "url": "/labs/lab-01/git/#getting-started",
    
    "relUrl": "/labs/lab-01/git/#getting-started"
  },"8": {
    "doc": "Git",
    "title": "Merge Conflict with an Imaginary Collaborator",
    "content": "Now we simulate a common situation that arises when two or more people use the same repo. | Navigate to your repo and create new me.txt with your name and MIT email, e.g. $ cat me.txt Jon Snow lordsnow@mit.edu . | Check the status with git status | Add (stage), check the status, commit and push your changes ‚Äì commit message can be ‚ÄúAdded my email‚Äù add me.txt git status git commit -m \"Added my email\" git push . | Inspect the log with git log | . Now you can go to your repo‚Äôs page on Github and inspect the commit history and contents of your repo. Let‚Äôs continue editing the files . | Let‚Äôs create a new branch git checkout -b new_branch_to_merge_later . | Edit the file me.txt with completely different content, e.g. $ cat me.txt Arya Stark astark@mit.edy . | Add (stage), check the status, and commit your changes (you can push too if you want) ‚Äì commit message can be ‚ÄúSomebody added another email‚Äù | Now switch branch to master with git checkout master | Inspect the output of git log --graph --oneline --all | Append your course number to the file $ echo \"Course 16\" &gt;&gt; me.txt $ cat me.txt Jon Snow lordsnow@mit.edu Course 16 . | Add (stage), check the status, and commit your changes ‚Äì commit message can be ‚ÄúAdded my course number‚Äù | Merge the two branches $ git merge new_branch_to_merge_later Auto-merging me.txt CONFLICT (content): Merge conflict in me.txt Automatic merge failed; fix conflicts and then commit the result. | . BOOM üí•. A conflict appears. Thanks, Git for letting us know about this! Let‚Äôs resolve the conflict . | Inspect the file me.txt, you should see something like - Git helps us by marking the conflict region with special characters: HEAD refers to your current branch/commit and below the ======= the other commit $ cat me.txt &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Jon Snow lordsnow@mit.edu Course 16 ======= Arya Stark astark@mit.edu &gt;&gt;&gt;&gt;&gt;&gt;&gt; new_branch_to_merge_later . | In this case, we would like to have Jon name so we simply remove everything else (including &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD) from the file | After resolving the conflict, it is time to stage our file and create our merge commit - inspect the log, see the diff, and check the status git add me.txt git commit -m \"Merge commit\" git push . | Inspect the output of git log --graph --oneline --all | Inspect the output of git diff HEAD~2 - what does this command do? | . ",
    "url": "/labs/lab-01/git/#merge-conflict-with-an-imaginary-collaborator",
    
    "relUrl": "/labs/lab-01/git/#merge-conflict-with-an-imaginary-collaborator"
  },"9": {
    "doc": "Home",
    "title": "AEROSP 740: Online Learning for Control",
    "content": "Fall 2025 ‚Äì University of Michigan . This website will be used to publish course labs, handouts, and other materials. All important resources and updates for the course will be available here. | Start with Lectures | See Lab Handouts | . ",
    "url": "/#aerosp-740-online-learning-for-control",
    
    "relUrl": "/#aerosp-740-online-learning-for-control"
  },"10": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"11": {
    "doc": "Lab 1",
    "title": "Lab 1",
    "content": "In this lab we will install Ubuntu 22.04, learns the shell basics and write our first C++ programs. ",
    "url": "/labs/lab-01/",
    
    "relUrl": "/labs/lab-01/"
  },"12": {
    "doc": "Lab 2",
    "title": "Lab 2",
    "content": "In this lab we will install ROS, learn the basics of the Robot Operating System and complete related exercises. ",
    "url": "/labs/lab-02/",
    
    "relUrl": "/labs/lab-02/"
  },"13": {
    "doc": "Lab 2",
    "title": "Table of contents",
    "content": ". | Installing ROS | Introduction to ROS | Exercises | . ",
    "url": "/labs/lab-02/#table-of-contents",
    
    "relUrl": "/labs/lab-02/#table-of-contents"
  },"14": {
    "doc": "Labs",
    "title": "Handouts for Labs",
    "content": " ",
    "url": "/labs/#handouts-for-labs",
    
    "relUrl": "/labs/#handouts-for-labs"
  },"15": {
    "doc": "Labs",
    "title": "Labs",
    "content": " ",
    "url": "/labs/",
    
    "relUrl": "/labs/"
  },"16": {
    "doc": "Lectures",
    "title": "Lectures",
    "content": "Slides, reading, and notes here. ",
    "url": "/lectures/",
    
    "relUrl": "/lectures/"
  },"17": {
    "doc": "Install Ubuntu 22.04",
    "title": "Install Ubuntu 22.04",
    "content": "For this and the following labs, you need a (preferably clean) Ubuntu 22.04 LTS (Jammy Jellyfish) installation (see below). There are plenty of installation guides and tutorials on the web (and, in particular, on Youtube). ",
    "url": "/labs/lab-01/install-ubuntu/",
    
    "relUrl": "/labs/lab-01/install-ubuntu/"
  },"18": {
    "doc": "Install Ubuntu 22.04",
    "title": "Steps",
    "content": ". | Download the ISO image from ubuntu.com | Create a bootable USB stick . | How to create a bootable USB stick on Windows | How to create a bootable USB stick on Mac OS | How to create a bootable USB stick on Ubuntu | . | Boot from USB stick and install . | Install Ubuntu desktop (full erase) | Install Ubuntu alongside Windows (dual boot) | . | . Warning . Partitioning can be tricky if you are installing Linux for the first time. There are plenty of guides for ‚Äúdual-boot Ubuntu installation‚Äù alongside both Windows and OS X. In most cases, you would first need to shrink one of your partitions (e.g., in Windows) and create an ‚Äúunallocated space‚Äù which will be used during the Ubuntu installation process. Ask for help if you are unsure. ",
    "url": "/labs/lab-01/install-ubuntu/#steps",
    
    "relUrl": "/labs/lab-01/install-ubuntu/#steps"
  },"19": {
    "doc": "Install Ubuntu 22.04",
    "title": "Ubuntu Setup",
    "content": "Once Linux is installed we need to update all the packages, to do so open a terminal (CTRL+Alt+T) and type . sudo apt update sudo apt upgrade sudo apt install build-essential cmake . ",
    "url": "/labs/lab-01/install-ubuntu/#ubuntu-setup",
    
    "relUrl": "/labs/lab-01/install-ubuntu/#ubuntu-setup"
  },"20": {
    "doc": "Installing ROS",
    "title": "Installing ROS",
    "content": " ",
    "url": "/labs/lab-02/installing-ros/",
    
    "relUrl": "/labs/lab-02/installing-ros/"
  },"21": {
    "doc": "Introduction to ROS",
    "title": "Introduction to ROS",
    "content": " ",
    "url": "/labs/lab-02/introduction-to-ros/",
    
    "relUrl": "/labs/lab-02/introduction-to-ros/"
  },"22": {
    "doc": "Python",
    "title": "Python",
    "content": " ",
    "url": "/labs/lab-01/python/",
    
    "relUrl": "/labs/lab-01/python/"
  },"23": {
    "doc": "Python",
    "title": "Table of Contents",
    "content": ". | Python Virtual Environments (venv) . | Why Use Virtual Environments? | Creating and Using Virtual Environments | Managing Packages in Virtual Environment | Example requirements.txt | Deactivating and Removing Environments | . | Python Basics . | Variables and Data Types | Control Flow | Functions | . | NumPy Tutorial . | Installation and Import | Creating Arrays | Array Properties | Array Operations | Matrix Operations | Array Indexing and Slicing | Reshaping and Concatenation | Statistical Operations | Practical Example: Linear Algebra | Working with Random Numbers | . | . ",
    "url": "/labs/lab-01/python/#table-of-contents",
    
    "relUrl": "/labs/lab-01/python/#table-of-contents"
  },"24": {
    "doc": "Python",
    "title": "Python Virtual Environments (venv)",
    "content": "Virtual environments are isolated Python environments that allow you to install packages for specific projects without affecting your system Python installation. Why Use Virtual Environments? . | Isolation: Keep project dependencies separate | Version control: Use different versions of packages for different projects | Clean system: Avoid cluttering your system Python installation | Reproducibility: Share exact package versions with others | . Creating and Using Virtual Environments . # Create a new virtual environment python3 -m venv ae740_venv # Activate the virtual environment source ae740_venv/bin/activate # Your prompt should change to show the environment name (ae740_venv) user@computer:~$ . Managing Packages in Virtual Environment . # Install packages (only affects current environment) pip install numpy pip install matplotlib scipy pandas # Install specific versions pip install numpy==1.21.0 # Install from requirements file pip install -r requirements.txt # List installed packages pip list # Create requirements file pip freeze &gt; requirements.txt . Example requirements.txt . numpy==1.24.3 matplotlib==3.7.1 scipy==1.10.1 pandas==2.0.2 jupyter==1.0.0 . Deactivating and Removing Environments . # Deactivate current environment deactivate # Remove virtual environment (just delete the folder) rm -rf ae740_venv . ",
    "url": "/labs/lab-01/python/#python-virtual-environments-venv",
    
    "relUrl": "/labs/lab-01/python/#python-virtual-environments-venv"
  },"25": {
    "doc": "Python",
    "title": "Python Basics",
    "content": "Variables and Data Types . # Numbers integer_num = 42 float_num = 3.14 complex_num = 2 + 3j # Strings text = \"Hello, Python!\" multiline = \"\"\"This is a multiline string\"\"\" # Booleans is_true = True is_false = False # Lists numbers = [1, 2, 3, 4, 5] mixed_list = [1, \"hello\", 3.14, True] # Dictionaries person = {\"name\": \"Alice\", \"age\": 30, \"city\": \"Ann Arbor\"} . Control Flow . # If statements x = 10 if x &gt; 5: print(\"x is greater than 5\") elif x == 5: print(\"x equals 5\") else: print(\"x is less than 5\") # For loops for i in range(5): print(f\"Iteration {i}\") # While loops count = 0 while count &lt; 3: print(f\"Count: {count}\") count += 1 # List comprehensions squares = [x**2 for x in range(10)] even_squares = [x**2 for x in range(10) if x % 2 == 0] . Functions . def greet(name, age=None): \"\"\"Function to greet a person.\"\"\" if age: return f\"Hello {name}, you are {age} years old!\" else: return f\"Hello {name}!\" # Function call message = greet(\"Alice\", 25) print(message) # Lambda functions square = lambda x: x**2 print(square(5)) # Output: 25 . ",
    "url": "/labs/lab-01/python/#python-basics",
    
    "relUrl": "/labs/lab-01/python/#python-basics"
  },"26": {
    "doc": "Python",
    "title": "NumPy Tutorial",
    "content": "Installation and Import . # Install NumPy (run in terminal) # pip install numpy import numpy as np . Creating Arrays . # From lists arr1 = np.array([1, 2, 3, 4, 5]) arr2d = np.array([[1, 2, 3], [4, 5, 6]]) # Built-in functions zeros = np.zeros((3, 3)) ones = np.ones((2, 4)) eye = np.eye(3) # Identity matrix range_arr = np.arange(0, 10, 2) # [0, 2, 4, 6, 8] linspace = np.linspace(0, 1, 5) # [0, 0.25, 0.5, 0.75, 1] # Random arrays random_arr = np.random.random((3, 3)) normal_arr = np.random.normal(0, 1, (2, 2)) . Array Properties . arr = np.array([[1, 2, 3], [4, 5, 6]]) print(f\"Shape: {arr.shape}\") # (2, 3) print(f\"Size: {arr.size}\") # 6 print(f\"Dimensions: {arr.ndim}\") # 2 print(f\"Data type: {arr.dtype}\") # int64 . Array Operations . a = np.array([1, 2, 3, 4]) b = np.array([5, 6, 7, 8]) # Element-wise operations addition = a + b # [6, 8, 10, 12] subtraction = a - b # [-4, -4, -4, -4] multiplication = a * b # [5, 12, 21, 32] division = a / b # [0.2, 0.33, 0.43, 0.5] # Mathematical functions sqrt_a = np.sqrt(a) sin_a = np.sin(a) exp_a = np.exp(a) . Matrix Operations . # 2D arrays (matrices) A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) # Matrix multiplication matrix_mult = np.dot(A, B) # or A @ B # Result: [[19, 22], [43, 50]] # Transpose A_T = A.T # or np.transpose(A) # Determinant and inverse det_A = np.linalg.det(A) inv_A = np.linalg.inv(A) # Eigenvalues and eigenvectors eigenvals, eigenvecs = np.linalg.eig(A) . Array Indexing and Slicing . arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) # Basic indexing print(arr[0]) # 0 print(arr[-1]) # 9 # Slicing print(arr[2:5]) # [2, 3, 4] print(arr[::2]) # [0, 2, 4, 6, 8] # 2D array indexing arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print(arr2d[1, 2]) # 6 print(arr2d[0:2, 1:]) # [[2, 3], [5, 6]] # Boolean indexing mask = arr &gt; 5 print(arr[mask]) # [6, 7, 8, 9] . Reshaping and Concatenation . arr = np.arange(12) # Reshaping reshaped = arr.reshape(3, 4) flattened = reshaped.flatten() # Concatenation a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) concatenated = np.concatenate([a, b]) # [1, 2, 3, 4, 5, 6] # Stacking stacked_v = np.vstack([a, b]) # Vertical stack stacked_h = np.hstack([a, b]) # Horizontal stack . Statistical Operations . data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Basic statistics mean = np.mean(data) # 5.0 median = np.median(data) # 5.0 std = np.std(data) # 2.58 var = np.var(data) # 6.67 # Along specific axes mean_axis0 = np.mean(data, axis=0) # [4, 5, 6] mean_axis1 = np.mean(data, axis=1) # [2, 5, 8] # Min, max, argmin, argmax minimum = np.min(data) # 1 maximum = np.max(data) # 9 min_index = np.argmin(data) # 0 max_index = np.argmax(data) # 8 . Practical Example: Linear Algebra . # Solving linear system: Ax = b A = np.array([[3, 1], [1, 2]]) b = np.array([9, 8]) # Solution: x = A^(-1) * b x = np.linalg.solve(A, b) print(f\"Solution: x = {x}\") # [2, 3] # Verify solution print(f\"Verification: Ax = {A @ x}\") # [9, 8] . Working with Random Numbers . # Set seed for reproducibility np.random.seed(42) # Generate random data random_data = np.random.normal(0, 1, 1000) # Normal distribution uniform_data = np.random.uniform(0, 1, 100) # Uniform distribution # Random sampling indices = np.random.choice(len(random_data), size=10, replace=False) sample = random_data[indices] . ",
    "url": "/labs/lab-01/python/#numpy-tutorial",
    
    "relUrl": "/labs/lab-01/python/#numpy-tutorial"
  },"27": {
    "doc": "Shell Basics",
    "title": "Shell basics",
    "content": " ",
    "url": "/labs/lab-01/shell-basics/#shell-basics",
    
    "relUrl": "/labs/lab-01/shell-basics/#shell-basics"
  },"28": {
    "doc": "Shell Basics",
    "title": "Table of contents",
    "content": ". | Shell basics . | Exploring the Filesystem . | pwd | ls . | File permissions and ownership | . | cd | find | . | Edit Filesystem . | mkdir | touch | rm | cp | mv | . | Viewing and Editing Files . | cat | nano and vim | . | Download, uncompress and execute a script . | Download | Uncompress | Run | . | Pipe | Output redirect | Superuser | Install packages | Get help | . | . ",
    "url": "/labs/lab-01/shell-basics/#table-of-contents",
    
    "relUrl": "/labs/lab-01/shell-basics/#table-of-contents"
  },"29": {
    "doc": "Shell Basics",
    "title": "Exploring the Filesystem",
    "content": "pwd . Modern filesystems are organized in folders, being able to navigate the filesystem is fundamental. Everytime we work with the shell we are within one folder, to know where we are we can use the command pwd (Print Working Directory): . $ pwd /home/username/vnav2020/lab1 . where username is the login username you set. ls . To list the contents of the current directory (files and/or child directories, etc.) we use ls (LiSt) . $ ls ex0.cpp ex1.cpp ex2.cpp final.cpp . File permissions and ownership . The concept of permissions and ownership is crucial in anu unix system. Every to file and directory is assigned 3 types of owner: . | User: is the owner of the file, by default, the person who created a file | Group: user-group can contain multiple users, all users belonging to a group will have the same access permissions to the file | Other: Any other user who has access to a file | . At the same time to every file and directory is assigned a type of permission . | Read | Write | Execute | . We get all this information using ls -l, for example: . $ ls -l total 1112 -rw-r--r-- 1 username staff 557042 Aug 24 21:57 dante.txt -rwxr-xr-x 1 username staff 40 Aug 23 18:36 hello.sh -rw-r--r-- 1 username staff 171 Aug 23 18:28 hello_vnav2020.tar.gz -rw-r--r-- 1 username staff 49 Aug 24 22:55 numbers.txt . The permissions are specified by the 1st field, the ownership is specified by the 3rd and 4th fields. Fo example, the file hello.sh is owned by me (username) and the group is staff. THe permission string is -rwxr-xr-x meaning that: . | The owner can read (r), write (w) and execute (x) the file | The group can read and execute | Other can read and execute | . cd . To change the current folder we can use cd (Change Directory). For example cd / moves to the file system root or . cd /home . To move to the parent of the current folder we use cd .., it can also be concatenated like cd ../.. to move two (or more) levels up. To move back to your home folder we use cd ~ (or simply cd). find . Image you have a folder containing many files and you want to locate a file called findme.txt. To accomplish it you can use . find . -name \"findme.txt\" . Let‚Äôs analyze the command. The . represent the current folder, so we are saying to find to look in the current folder recursively (you can change it with relative or absolute paths) for a file called findme.txt. Find is a powerful tool, you can have complex expression to match files, have a look at find --help. ",
    "url": "/labs/lab-01/shell-basics/#exploring-the-filesystem",
    
    "relUrl": "/labs/lab-01/shell-basics/#exploring-the-filesystem"
  },"30": {
    "doc": "Shell Basics",
    "title": "Edit Filesystem",
    "content": "mkdir . mkdir (make directory) is used to create new, empty directories: let‚Äôs create a new dir named newdir . $ mkdir newdir $ ls newdir $ cd newdir . touch . touch was created to modify file timestamps, but it can also be used to quickly create an empty file. You can easily create a newfile.txt with . $ touch newfile.txt $ ls newfile.txt . rm . You can remove any file with rm ‚Äì be careful, this is non-recoverable! I suggest to add the flag -i to prompt a confirmation message . rm -i newfile.txt rm: remove regular empty file 'newfile.txt'? y . You can also remove directories with rm, the only catch is that it returns an error when the folder is not-empty. The common practice, but pretty prone to non-recoverable errors, is to run rm -rf foldername. The command will remove the folder with all its content (r - recursive) forcing the operation (f - force). This operation will not ask for confirmation. You can of course add the flag i (i.e. rm -rfi foldername) but will ask confirmation for every file, this is pretty annoying if the folder contains many files. cp . Copying file is as simple as running cp (CoPy). If we want to duplicate the file numbers.txt we can run . $ cp numbers.txt numbers_copy.txt $ls numbers.txt numbers_copy.txt . mv . If we want to rename numbers_copy.txt to new_numbers.txt we can run . $ mv numbers_copy.txt new_numbers.txt $ ls new_numbers.txt numbers.txt . With the same command we can also move the file to another location, for example if we want to move numbers.txt to a newly create folder dataset we execute . $ mkdir dataset $ mv numbers.txt dataset/numbers.txt $ ls dataset numbers.txt . ",
    "url": "/labs/lab-01/shell-basics/#edit-filesystem",
    
    "relUrl": "/labs/lab-01/shell-basics/#edit-filesystem"
  },"31": {
    "doc": "Shell Basics",
    "title": "Viewing and Editing Files",
    "content": "cat . cat concatenates a list of files and sends them to the standard output stream and is often used to quickly view the content of a file. For example we can inspect the content of the file numbers.txt. $ cat numbers.txt One Two Three Four Five Six Seven Eight Nine Ten . nano and vim . nano is a minimalistic command-line text editor. It‚Äôs a great editor for beginners. More demanding user pefer vim. It‚Äôs a powerful and highly customizable text editor (I love it!). I strongly suggest to learn how to use vim, one of the best way to learn vim is to simply run vimtutor in your terminal but if you prefer games try Vim Adventures! . ",
    "url": "/labs/lab-01/shell-basics/#viewing-and-editing-files",
    
    "relUrl": "/labs/lab-01/shell-basics/#viewing-and-editing-files"
  },"32": {
    "doc": "Shell Basics",
    "title": "Download, uncompress and execute a script",
    "content": "In this section we will download a compressed file, extract the content, inspect and run a script. Download . Imagine you have to download (you have to, actually) http://www.mit.edu/~username/hello_vnav19.tar.gz you can use wget. wget http://www.mit.edu/~username/hello_vnav19.tar.gz . Uncompress . As you see it is a compressed file, to uncompress it we can use tar . tar -xvf hello_vnav2020.tar.gz . The flags xvf are respectively extract, verbose file. Now we would like to run the script. We should first inspect the file (never run a script without inspection), let‚Äôs use cat . $ cat hello.sh #!/usr/bin/env bash echo \"Hello world!\" . The file is not dangerous, it only print something to the terminal. Run . Before running the script we should verify that we can actually run the script so let‚Äôs see its permissions . $ ls -l hello.sh -rw-r--r-- 1 username staff 40 Aug 23 18:36 hello.sh . Ops! This time we have no right to run the script, we have to add it: . chmod +x hello.sh . Let‚Äôs check again: . ls -l hello.sh -rwxr-xr-x 1 username staff 40 Aug 23 18:36 hello.sh . Ok, now we can execute the script. To execute the script it‚Äôs enough to add ./ before the name of the file to e . $ ./hello.sh Hello world! . ",
    "url": "/labs/lab-01/shell-basics/#download-uncompress-and-execute-a-script",
    
    "relUrl": "/labs/lab-01/shell-basics/#download-uncompress-and-execute-a-script"
  },"33": {
    "doc": "Shell Basics",
    "title": "\n      Keep in mind.\n    ",
    "content": "When you use ./ the bash shell is creating a new shell, child of the current one and executing the code there. This is usually fine, sometimes you need to run a script like it was prompted directly in the current bash, in that case you should use the source command, e.g. source hello.sh . ",
    "url": "/labs/lab-01/shell-basics/",
    
    "relUrl": "/labs/lab-01/shell-basics/"
  },"34": {
    "doc": "Shell Basics",
    "title": "Pipe",
    "content": "The Pipe is a command in Linux that lets you use two or more commands such that output of one command serves as input to the next. In short, the output of each process directly as input to the next one like a pipeline. The symbol | denotes a pipe. For example, consider the following file: . $ cat numbers.txt One Two Three Four Five Six Seven Eight Nine Ten . We can sort the lines piping cat with sort . $ cat numbers.txt | sort Eight Five Four Nine One Seven Six Ten Three Two . ",
    "url": "/labs/lab-01/shell-basics/#pipe",
    
    "relUrl": "/labs/lab-01/shell-basics/#pipe"
  },"35": {
    "doc": "Shell Basics",
    "title": "Output redirect",
    "content": "We redirect the output of a command to a file. This is useful when we want to save the output of a program without writing specific code. The common commands that we use and their results are . | command &gt; output.txt | . The standard output stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, it gets overwritten. | command &amp;&gt; output.txt | . Both the standard output and standard error stream will be redirected to the file only, nothing will be visible in the terminal. If the file already exists, it gets overwritten. | command | tee output.txt | . The standard output stream will be copied to the file, it will still be visible in the terminal. If the file already exists, it gets overwritten. | command |&amp; tee output.txt | . Both the standard output and standard error streams will be copied to the file while still being visible in the terminal. If the file already exists, it gets overwritten. ",
    "url": "/labs/lab-01/shell-basics/#output-redirect",
    
    "relUrl": "/labs/lab-01/shell-basics/#output-redirect"
  },"36": {
    "doc": "Shell Basics",
    "title": "\n      Moreover.\n    ",
    "content": "If you want to append instead of overwrite you can use the double angle brackets &gt;&gt;. With tee instead add the flag -a (e.g. tee -a output.txt). ",
    "url": "/labs/lab-01/shell-basics/",
    
    "relUrl": "/labs/lab-01/shell-basics/"
  },"37": {
    "doc": "Shell Basics",
    "title": "Superuser",
    "content": "Working with the terminal you wil, sooner or later, get a ‚ÄúPermission denied‚Äù error. This occur because you do not have the right permission to run the command. For example if you try install vim you might get something like . $ apt install sl E: Could not open lock file /var/lib/dpkg/lock-frontend - open (13: Permission denied) E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), are you root? . The superuser (usually ‚Äúroot‚Äù) is the only person who can install software, to install vim we must elevate ourself to system administrator . The command we need to use is sudo . $ sudo apt install sl [sudo] password for username: Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: sl 0 upgraded, 1 newly installed, 0 to remove and 2 not upgraded. Need to get 26.4 kB of archives. After this operation, 98.3 kB of additional disk space will be used. Get:1 http://us.archive.ubuntu.com/ubuntu bionic/universe amd64 sl amd64 3.03-17build2 [26.4 kB] Fetched 26.4 kB in 0s (250 kB/s) Selecting previously unselected package sl. (Reading database ... 162980 files and directories currently installed.) Preparing to unpack .../sl_3.03-17build2_amd64.deb ... Unpacking sl (3.03-17build2) ... Setting up sl (3.03-17build2) ... Processing triggers for man-db (2.8.3-2ubuntu0.1) ... ",
    "url": "/labs/lab-01/shell-basics/#superuser",
    
    "relUrl": "/labs/lab-01/shell-basics/#superuser"
  },"38": {
    "doc": "Shell Basics",
    "title": "Install packages",
    "content": "Ubuntu, like any other Linux distribution based on Debian, use the dpkg packaging system. A packaging system is a way to provide programs and applications for installation. This way, we don‚Äôt have to build every program from the source. APT (Advanced Package Tool) is the command line tool to interact with the packaging system. Installing a package that is available on one of the repository known by the system is as easy as running . sudo apt install &lt;package_1&gt; &lt;package_2&gt; &lt;package_3&gt; . For example if we want to install the package sl we would simply run . sudo apt install sl . Try to run sl now! . ",
    "url": "/labs/lab-01/shell-basics/#install-packages",
    
    "relUrl": "/labs/lab-01/shell-basics/#install-packages"
  },"39": {
    "doc": "Shell Basics",
    "title": "Get help",
    "content": "It‚Äôs hard remember all commands with all their flags, man command in Linux is used to display the user manual of any command that we can run on the terminal. Moreover many commands offer an help (for example try to run ls --help). The common ways to summon the help is via the flags -h or --help. Last but not least, Google is your friend! . ",
    "url": "/labs/lab-01/shell-basics/#get-help",
    
    "relUrl": "/labs/lab-01/shell-basics/#get-help"
  },"40": {
    "doc": "Shell Basics",
    "title": "Shell Basics",
    "content": " ",
    "url": "/labs/lab-01/shell-basics/",
    
    "relUrl": "/labs/lab-01/shell-basics/"
  }
}
